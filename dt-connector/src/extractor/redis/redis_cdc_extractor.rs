use super::redis_client::RedisClient;
use super::redis_psync_extractor::RedisPsyncExtractor;
use super::redis_resp_types::Value;
use crate::Extractor;
use async_trait::async_trait;
use concurrent_queue::ConcurrentQueue;
use dt_common::error::Error;
use dt_common::log_error;
use dt_common::log_info;
use dt_common::utils::rdb_filter::RdbFilter;
use dt_meta::dt_data::DtItem;
use dt_meta::position::Position;
use dt_meta::redis::redis_entry::RedisEntry;
use dt_meta::redis::redis_object::RedisCmd;
use dt_meta::syncer::Syncer;
use std::sync::atomic::AtomicBool;
use std::sync::Arc;
use std::sync::Mutex;
use std::time::Instant;
use std::time::SystemTime;
use std::time::UNIX_EPOCH;

pub struct RedisCdcExtractor {
    pub conn: RedisClient,
    pub buffer: Arc<ConcurrentQueue<DtItem>>,
    pub run_id: String,
    pub repl_offset: u64,
    pub repl_port: u64,
    pub now_db_id: i64,
    pub heartbeat_interval_secs: u64,
    pub heartbeat_key: String,
    pub shut_down: Arc<AtomicBool>,
    pub syncer: Arc<Mutex<Syncer>>,
    pub filter: RdbFilter,
}

#[async_trait]
impl Extractor for RedisCdcExtractor {
    async fn extract(&mut self) -> Result<(), Error> {
        let mut psync_extractor = RedisPsyncExtractor {
            conn: &mut self.conn,
            buffer: self.buffer.clone(),
            run_id: self.run_id.clone(),
            repl_offset: self.repl_offset,
            repl_port: self.repl_port,
            now_db_id: self.now_db_id,
            filter: self.filter.clone(),
        };

        // receive rdb data if needed
        psync_extractor.extract().await?;
        self.run_id = psync_extractor.run_id;
        self.repl_offset = psync_extractor.repl_offset;

        self.receive_aof().await
    }

    async fn close(&mut self) -> Result<(), Error> {
        self.conn.close().await
    }
}

impl RedisCdcExtractor {
    async fn receive_aof(&mut self) -> Result<(), Error> {
        let mut heartbeat_timestamp = String::new();
        let mut hearbeat_conn = RedisClient::new(&self.conn.url).await?;
        let mut start_time = Instant::now();
        loop {
            // heartbeat
            if start_time.elapsed().as_secs() > self.heartbeat_interval_secs {
                self.heartbeat(&mut hearbeat_conn).await?;
                start_time = Instant::now();
            }

            let (value, n) = self.conn.read_with_len().await.unwrap();
            if Value::Nil == value {
                continue;
            }

            self.repl_offset += n as u64;
            let cmd = self.handle_redis_value(value).await.unwrap();

            if !cmd.args.is_empty() {
                // switch db
                if cmd.get_name().eq_ignore_ascii_case("select") {
                    self.now_db_id = String::from_utf8(cmd.args[1].clone())
                        .unwrap()
                        .parse::<i64>()
                        .unwrap();
                    continue;
                }

                // get timestamp generated by heartbeat
                if cmd.get_str_arg(1).eq_ignore_ascii_case(&self.heartbeat_key) {
                    heartbeat_timestamp = cmd.get_str_arg(2);
                    continue;
                }

                // build entry and push it to buffer
                let mut entry = RedisEntry::new();
                entry.cmd = cmd;
                entry.db_id = self.now_db_id;
                let position = Position::Redis {
                    run_id: self.run_id.clone(),
                    repl_offset: self.repl_offset,
                    now_db_id: self.now_db_id,
                    timestamp: heartbeat_timestamp.clone(),
                };
                RedisPsyncExtractor::push_to_buf(&self.buffer, &mut self.filter, entry, position)
                    .await;
            }
        }
    }

    async fn handle_redis_value(&mut self, value: Value) -> Result<RedisCmd, Error> {
        let mut cmd = RedisCmd::new();
        match value {
            Value::Bulk(values) => {
                for v in values {
                    match v {
                        Value::Data(data) => cmd.add_arg(data),
                        _ => {
                            log_error!("received unexpected value in aof bulk: {:?}", v);
                            break;
                        }
                    }
                }
            }
            v => {
                return Err(Error::RedisRdbError(format!(
                    "received unexpected aof value: {:?}",
                    v
                )));
            }
        }
        Ok(cmd)
    }

    async fn heartbeat(&mut self, heartbeat_conn: &mut RedisClient) -> Result<(), Error> {
        // 1, send replconf ack to keep the connection alive
        let mut position_repl_offset = self.repl_offset;
        if let Position::Redis { repl_offset, .. } = self.syncer.lock().unwrap().checkpoint_position
        {
            if repl_offset >= self.repl_offset {
                position_repl_offset = repl_offset
            }
        }

        let repl_offset = &position_repl_offset.to_string();
        let args = vec!["replconf", "ack", repl_offset];
        let cmd = RedisCmd::from_str_args(&args);
        log_info!("replconf ack cmd: {}", cmd.to_string());
        if let Err(err) = self.conn.send(&cmd).await {
            log_error!("replconf ack failed, error: {:?}", err);
        }

        // 2, send `SET heartbeat_key current_timestamp` by another connecion to generate timestamp
        let since_epoch = SystemTime::now().duration_since(UNIX_EPOCH).unwrap();
        let timestamp =
            since_epoch.as_secs() * 1000 + since_epoch.subsec_nanos() as u64 / 1_000_000;
        let heartbeat_value = Position::format_timestamp_millis(timestamp as i64);

        let args = vec!["SET", &self.heartbeat_key, &heartbeat_value];
        let cmd = RedisCmd::from_str_args(&args);
        log_info!("heartbeat cmd: {}", cmd.to_string());
        if let Err(err) = heartbeat_conn.send(&cmd).await {
            log_error!("SET {} failed, error: {:?}", self.heartbeat_key, err);
        }

        Ok(())
    }
}
